// Allows centralized definition of the version of artifacts to
// use.  In that respect it serves a role similar to <dependencyManagement> in Maven
ext {
    vavrVersion = '0.10.2'
    rxJava2Version = '2.2.8'
    rxJava3Version = '3.0.0'
    reactorVersion = '3.4.0'
    junitVersion = '4.12'
    slf4jVersion = '1.7.30'
    assertjVersion = '3.18.1'
    logbackVersion = '1.2.3'
    mockitoVersion = '2.25.1'
    powermockVersion = '2.0.0'
    jcacheVersion = '1.1.0'
    awaitilityVersion = '1.7.0'
    metricsVersion = '4.1.16'
    vertxVersion = '3.7.0'
    aspectjVersion = '1.9.2'
    springVersion = '5.3.2'
    springBoot2Version = '2.4.1'
    springCloudContext2Version = '3.0.0'
    ratpackVersion = '1.7.6'
    spockVersion = '1.3-groovy-2.5'
    retrofitVersion = '2.5.0'
    feignVersion = '10.2.0'
    prometheusSimpleClientVersion = '0.9.0'
    reactiveStreamsVersion = '1.0.2'
    micrometerVersion = '1.5.1'
    hibernateValidatorVersion = '6.0.18.Final'
    wiremockVersion = '2.26.0'
    validationApiVersion = '2.0.1.Final'
    kotlinCoroutinesVersion = '1.4.2'
    springBootOpenFeignVersion = '2.2.6.RELEASE'
    blockhoundVersion = '1.0.1.RELEASE'
    micronautVersion = '2.1.0'
    micronautTestVersion = '2.1.0'
    groovyVersion = '2.5.6'

    libraries = [
            // compile
            vavr: "io.vavr:vavr:${vavrVersion}",
            slf4j: "org.slf4j:slf4j-api:${slf4jVersion}",
            rxjava2: "io.reactivex.rxjava2:rxjava:${rxJava2Version}",
            rxjava3: "io.reactivex.rxjava3:rxjava:${rxJava3Version}",
            jcache: "javax.cache:cache-api:${jcacheVersion}",
            reactor: "io.projectreactor:reactor-core:${reactorVersion}",

            // testCompile
            junit: "junit:junit:${junitVersion}",
            assertj: "org.assertj:assertj-core:${assertjVersion}",
            logback: "ch.qos.logback:logback-classic:${logbackVersion}",
            mockito: "org.mockito:mockito-core:${mockitoVersion}",
            powermock: "org.powermock:powermock-core:${powermockVersion}",
            powermock_api_mockito: "org.powermock:powermock-api-mockito2:${powermockVersion}",
            powermock_module_junit4: "org.powermock:powermock-module-junit4:${powermockVersion}",
            awaitility: "com.jayway.awaitility:awaitility:${awaitilityVersion}",
            reactor_test: "io.projectreactor:reactor-test:${reactorVersion}",
            reactive_streams_tck: "org.reactivestreams:reactive-streams-tck:${reactiveStreamsVersion}",
            mock_clock: "com.statemachinesystems:mock-clock:1.0",
            blockhound: "io.projectreactor.tools:blockhound:${blockhoundVersion}",

            // Vert.x addon
            vertx: "io.vertx:vertx-core:${vertxVersion}",
            vertx_unit: "io.vertx:vertx-unit:${vertxVersion}",

            // Aspectj for Spring addon
            aspectj: "org.aspectj:aspectjrt:${aspectjVersion}",
            // spring test
            spring_test: "org.springframework:spring-test:${springVersion}",

            // Spring Boot2 addon
            spring_core: "org.springframework:spring-core:${springVersion}",
            spring_context: "org.springframework:spring-context:${springVersion}",
            spring_boot2_aop: "org.springframework.boot:spring-boot-starter-aop:${springBoot2Version}",
            spring_boot2_actuator: "org.springframework.boot:spring-boot-starter-actuator:${springBoot2Version}",
            spring_boot2_web: "org.springframework.boot:spring-boot-starter-web:${springBoot2Version}",
            spring_boot2_test: "org.springframework.boot:spring-boot-starter-test:${springBoot2Version}",
            spring_boot2_config_processor: "org.springframework.boot:spring-boot-configuration-processor:${springBoot2Version}",
            spring_boot2_autoconfigure: "org.springframework.boot:spring-boot-autoconfigure:${springBoot2Version}",
            spring_boot2_autoconfigure_processor: "org.springframework.boot:spring-boot-autoconfigure-processor:${springBoot2Version}",

            // Spring Cloud
            spring_cloud_context2: "org.springframework.cloud:spring-cloud-context:${springCloudContext2Version}",

            //Spring webflux
            spring_boot2_webflux: "org.springframework.boot:spring-boot-starter-webflux:${springBoot2Version}",

            // Hibernate validator addon
            hibernate_validator: "org.hibernate.validator:hibernate-validator:${hibernateValidatorVersion}",

            // ratpack addon
            ratpack: "io.ratpack:ratpack-guice:${ratpackVersion}",
            ratpack_metrics: "io.ratpack:ratpack-dropwizard-metrics:${ratpackVersion}",
            ratpack_test: "io.ratpack:ratpack-groovy-test:${ratpackVersion}",
            spock: "org.spockframework:spock-core:${spockVersion}",

            // Retrofit addon
            retrofit: "com.squareup.retrofit2:retrofit:${retrofitVersion}",
            retrofit_test: "com.squareup.retrofit2:converter-scalars:${retrofitVersion}",
            retrofit_wiremock: "com.github.tomakehurst:wiremock-jre8:${wiremockVersion}",
            retrofit_rxjava: "com.squareup.retrofit2:adapter-rxjava2:2.3.0",

            // Feign addon
            feign: "io.github.openfeign:feign-core:${feignVersion}",
            feign_wiremock: "com.github.tomakehurst:wiremock-jre8:${wiremockVersion}",

            // Metrics addon
            metrics: "io.dropwizard.metrics:metrics-core:${metricsVersion}",

            // Micronaut addon
            micronaut: "io.micronaut:micronaut-bom:$micronautVersion",
            micronaut_inject: "io.micronaut:micronaut-inject-groovy:$micronautVersion",
            micronaut_spock: "io.micronaut.test:micronaut-test-spock:$micronautTestVersion",

            // Micrometers addon
            micrometer: "io.micrometer:micrometer-core:${micrometerVersion}",
            micrometer_prometheus: "io.micrometer:micrometer-registry-prometheus:${micrometerVersion}",
            micrometer_spring_legacy: "io.micrometer:micrometer-spring-legacy:${micrometerVersion}",

            // CircuitBreaker documentation
            metrics_healthcheck: "io.dropwizard.metrics:metrics-healthchecks:${metricsVersion}",

            // Prometheus addon
            prometheus_simpleclient: "io.prometheus:simpleclient_common:${prometheusSimpleClientVersion}",
            prometheus_spring_boot: "io.prometheus:simpleclient_spring_boot:${prometheusSimpleClientVersion}",

            jaxws: "com.sun.xml.ws:jaxws-ri:2.3.2",

            // Groovy
            groovy: "org.codehaus.groovy:groovy-all:${groovyVersion}",
            groovy_test: "org.codehaus.groovy:groovy-test:$groovyVersion",

            // validation
            validationApi: "javax.validation:validation-api:${validationApiVersion}",

            // Kotlin addon
            kotlin_stdlib: "org.jetbrains.kotlin:kotlin-stdlib-jdk8",
            kotlin_coroutines: "org.jetbrains.kotlinx:kotlinx-coroutines-core:${kotlinCoroutinesVersion}",

            // Spring cloud addon
            spring_cloud_openfeign_core: "org.springframework.cloud:spring-cloud-openfeign-core:${springBootOpenFeignVersion}",
            spring_cloud_starter_openfeign: "org.springframework.cloud:spring-cloud-starter-openfeign:${springBootOpenFeignVersion}",
            spring_cloud_context: "org.springframework.cloud:spring-cloud-context:${springCloudContext2Version}"
    ]

}
